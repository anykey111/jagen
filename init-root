#!/bin/sh

env_file="env.sh"
config_file="config.sh"

show_help() {
    cat <<EOF
Usage: init-root [-h] [OVERLAYS...]

  Initializes current directory as jagen build root.

SYNOPSIS:

  The script will put environment file '$env_file' and configuration file
  '$config_file' in the current directory. The environment file should be
  sourced in the current directory before issuing any other jagen commands.

  Example:

    cd $PWD
    $jagen_dir/init-root
    . ./$env_file

  For subsequent invocations:

    cd $PWD
    . ./$env_file

  The specified overlays will be set in the configuration file.

EOF
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_relative_dir="$jagen_dir"

jagen_dir=\$(cd "\$jagen_relative_dir"; pwd -P)
jagen_root=\$(pwd -P)
export jagen_dir jagen_root

. "\$jagen_dir/lib/env.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_private_dir/bin"
add_PATH "\$jagen_dir/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF
# jagen_dir  - refers to the jagen project directory.
# jagen_root - refers to the current build root (where this file is located).

# Environment overlays used by this build root.
jagen_overlays="$jagen_overlays"

# Toplevel working directory.
# Note: setting relative path allows to source this environment both from
# outside and inside the chrooted container.
jagen_base_dir=\$(real_path "\$jagen_dir/..")

# A directory containing software distributions and patches.
jagen_dist_dir="\$jagen_base_dir/dist"

# A directory where source packages will be checked out.
jagen_src_dir="\$jagen_base_dir/src"

# A directory where build products will be stored.
jagen_build_dir="\$jagen_root/build"

# A directory containing SDK.
jagen_sdk_dir="$sdk_dir"

# A directory containing target toolchain.
jagen_toolchain_dir="$toolchain_dir"

# Space separated list of optional features.
#   debug  - build debugging tools
#   ccache - wrap compilation commands with ccache
jagen_flags=""

# Space separated list of package names excluded from cleaning and updating.
# Example: jagen_source_exclude="chicken karaoke-player"
jagen_source_exclude=""

# Global build type.
# Available values: Release|RelWithDebInfo|Debug
jagen_build_type="Release"
EOF
}

jagen_dir=$(dirname $0)
jagen_root=''
jagen_overlays=''

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            if [ "$jagen_overlays" ]; then
                jagen_overlays="$jagen_overlays $1"
            else
                jagen_overlays="$1"
            fi
            ;;
    esac
    shift
done

. "$jagen_dir/lib/env.sh" || return

import init

write_env || die
write_config "$config_file" || die
. ./env.sh || die
jagen refresh
