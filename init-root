#!/bin/sh

env_file="env.sh"
config_file="config.sh"

die() {
    echo "init-root: $*"
    exit 1
}

show_help() {
    cat <<EOF
Usage: init-root <CONFIG> [OPTIONS...]
       init-root [-l|--list]
       init-root [-h|--help]

  Initializes current directory as jagen build root.

SYNOPSIS:

  The script will put an environment file '$env_file' and a configuration file
  '$config_file' in the current directory. The environment file should be
  sourced into the working shell before issuing any other jagen commands. The
  configuration file is sourced by a generator and a build system.

  Jagen will create and remove few directories inside the build root depending
  on the selected configuration and commands given, so it is not safe to store
  important data there. Also initializing jagen's own project directory as
  build root is not supported. It is recommended to use separate directory for
  every configuration and do not mix shell environments from different build
  roots.

OPTIONS:

  -a, --flags         specify default flags
  -l, --list          list config templates
  -s, --with-sources  use sources from this root
  -h, --help          show this help

  In the default configuration a path to software distributions, patches,
  source packages and toolchains is specified relative to base directory
  (\$jagen_dir/..) to facilitate sharing between different build roots. Specify
  '--with-sources' option to set the path to source packages inside the
  initialized build root (\$jagen_root/src). The sources will be cloned to this
  root separately which will allow you to have different branches checked out
  for different roots simultaneously. Note that 'jagen clean' command does not
  touch the source packages location even if it is inside the build root.

  The generated environment binds the build root to the corresponding jagen
  project directory. If one or the other is moved it will become invalid. Use
  'init-root' again to reinitialize.

  The generated configuration can be adjusted manually but will be overwritten
  by the next 'init-root' invocation.

EXAMPLES:

    mkdir -p ~/work/root-ast100
    cd ~/work/root-ast100
    "<jagen_dir>/init-root" ast100 -a flag1 flag2
    . ./$env_file
    jagen run target1 target2
    exit

  For subsequent invocations:

    cd ~/work/root-ast100
    . ./$env_file
    jagen run target3 target4

EOF
}

list_configs() {
    cd "$jagen_dir/lib/config"
    for cfg_dir in *; do
        echo $cfg_dir
    done
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_relative_dir="$jagen_dir"

jagen_dir=\$(cd "\$jagen_relative_dir"; pwd -P)
jagen_root=\$(pwd -P)
export jagen_dir jagen_root

. "\$jagen_dir/lib/env.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_private_dir/bin"
add_PATH "\$jagen_dir/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF
# jagen_dir  - refers to the jagen project directory.
# jagen_root - refers to the current build root (where this file is located).

# Environment overlays used by this build root.
jagen_overlays="$jagen_overlays"

# Toplevel working directory.
# Note: setting relative path allows to source this environment both from
# outside and inside the chrooted container.
jagen_base_dir=\$(real_path "\$jagen_dir/..")

# A directory containing software distributions and patches.
jagen_dist_dir="\$jagen_base_dir/dist"

# A directory where source packages will be checked out.
jagen_src_dir="$jagen_src_dir"

# A directory where build products will be stored.
jagen_build_dir="\$jagen_root/build"

# A directory containing target toolchain.
jagen_toolchain_dir="$jagen_toolchain_dir"

# A directory containing SDK.
jagen_sdk_dir="$jagen_sdk_dir"

# Space separated list of optional features.
#   debug   - build debugging tools
#   ccache  - wrap compilation commands with ccache
#   offline - skip network operations
jagen_flags="$jagen_flags"

# Space separated list of package names excluded from cleaning and updating.
# Example: jagen_source_exclude="chicken karaoke-player"
jagen_source_exclude=""

# Global build type.
# Available values: Release|RelWithDebInfo|Debug
jagen_build_type="Release"
EOF
}

parse_command_line() {
    local arg='config'

    while [ $# -gt 0 ]; do
        case $1 in
            -a|--flags)
                arg='flags' ;;
            -l|--list)
                list_configs; exit 0 ;;
            -s|--with-sources)
                with_sources=1 ;;
            -h|--help)
                show_help; exit 0 ;;
            -*)
                die "invalid argument: $1" ;;
            *)
                case $arg in
                    config)
                        jagen_config="$1"; arg='' ;;
                    flags)
                        if [ "$jagen_flags" ]; then
                            jagen_flags="$jagen_flags $1"
                        else
                            jagen_flags="$1"
                        fi ;;
                    *)
                        die "unexpected argument: $1"
                        ;;
                esac ;;
        esac
        shift
    done
}

jagen_dir=$(dirname $0)
jagen_root=''
jagen_config=''
jagen_flags=''

if [ $# = 0 ]; then
    show_help
    exit 0
fi

parse_command_line "$@"

if ! [ "$jagen_config" ]; then
    die "no configuration template specified"
fi

jagen_init_dir="$jagen_dir/lib/init/$jagen_config"

if ! [ -d "$jagen_init_dir" ]; then
    die "no such configuration template: $jagen_config"
fi

if [ "$with_sources" ]; then
    jagen_src_dir='$jagen_root/src'
else
    jagen_src_dir='$jagen_base_dir/src'
fi

. "$jagen_init_dir/env.sh" || exit

write_env || exit
write_config "$config_file" || exit
. ./env.sh || exit
jagen refresh
