#!/bin/sh

env_file="env.sh"
config_file="local.sh"

print_help() {
    cat <<EOF
Usage: init-root [-f] [-s] [SDK]

  Initializes current directory as jagen build root.

SYNOPSIS:

  The script will put environment file '$env_file' in the current directory.
  This file should be sourced in the current shell with working directory set
  to the build root before issuing any other jagen commands. Example:

    cd $PWD
    $root/init-root
    . ./$env_file
    jagen refresh

  For subsequent invocations:

    cd $PWD
    . ./$env_file
    jagen refresh

  If SDK is specified the template configuration file will be added to the
  generated build root. The existing file will not be overwritten unless the
  '-f' flag is given.

  The '-s' flag specifies that the source packages should be kept in the jagen
  project root. Without this flag the location of sources will be set to the
  build root.

  NOTE: To use remotely mounted build root pathname to the init-root script
  should be specified relative to the current directory and 'relative' should
  be given as an argument when sourcing '$env_file'. Example:

    cd "/mnt/src/build"
    . ./$env_file relative

EOF
}

write_env() {
    [ -f "$env_file" ] && echo "Overwriting environment file '$env_file'."
    cat >"$env_file" <<EOF || die
jagen_relative_root="$root"

if [ "\$1" = relative ]; then
    jagen_root="\$jagen_relative_root"
else
    jagen_root="$real_root"
fi

jagen_build_root="\$PWD"

export jagen_root jagen_build_root

. "\$jagen_root/lib/env.sh" ||
    { echo "Failed to load environment"; return 1; }

add_PATH "\$target_bin_dir"
add_PATH "\$pkg_private_dir/bin"
add_PATH "\$jagen_root/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF || die
# Current build root configuration type.
pkg_sdk='$sdk'

# A directory containing source distributions and patches.
# pkg_dist_dir=''

# A directory for source packages.
pkg_src_dir="$source_dir"

# Space separated list of optional features.
#   debug - build debugging tools
pkg_flags=''

# Package names excluded from clear and update during rebuilds.
# Example: pkg_source_exclude='chicken karaoke-player'
pkg_source_exclude=''

# Global build type.
# Available values: Release|RelWithDebInfo|Debug
pkg_build_type='Release'
EOF
}

die() { [ $# = 0 ] || echo "Error: $@"; exit 1; }

root=$(dirname $0)
real_root=$(cd "$root"; pwd -P)
sdk=''
use_force=''
use_source=''

if [ $# = 0 ]; then
    print_help
    exit 0
fi

for arg; do
    [ "$arg" = '-f' ] && { use_force=1; continue; }
    [ "$arg" = '-s' ] && { use_source=1; continue; }
    [ "$sdk" ] || { sdk="$arg";  continue; }
done

if [ "$use_source" ]; then
    source_dir='$jagen_root/src'
else
    source_dir='$jagen_build_root/src'
fi

write_env || die

if [ "$sdk" ]; then
    if [ -f "$config_file" ]; then
        if [ "$use_force" ]; then
            echo "Overwriting configuration file '$config_file'."
            write_config "$config_file"
        else
            echo "Not overwriting configuration file '$config_file'."
        fi
    else
        write_config "$config_file"
    fi
fi
