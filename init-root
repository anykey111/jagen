#!/bin/sh

env_file="env.sh"
config_file="local.sh"

show_help() {
    cat <<EOF
Usage: init-root [-h] [-f] [SDK]

  Initializes current directory as jagen build root.

SYNOPSIS:

  The script will put environment file '$env_file' in the current directory.
  This file should be sourced in the current shell before issuing any other
  jagen commands. Example:

    cd $PWD
    $curr_root/init-root
    . ./$env_file

  For subsequent invocations:

    cd $PWD
    . ./$env_file

  Note that '$env_file' should be sourced with working directory set to the
  build root.

  The template configuration file '$config_file' will be added to the build
  root. The existing file will not be overwritten unless the '-f' flag is
  given.
  
  If SDK is specified it will be set in the config.

EOF
}

write_env() {
    cat >"$env_file" <<EOF
#!/bin/sh

jagen_relative_dir="$curr_root"

jagen_dir=\$(cd "\$jagen_relative_dir"; pwd -P)
jagen_root=\$(pwd -P)
export jagen_dir jagen_root

. "\$jagen_dir/lib/env.sh"; sts=\$?
if [ \$sts != 0 ]; then
    echo "Error: failed to load jagen environment"
    return \$sts
fi

add_PATH "\$jagen_private_dir/bin"
add_PATH "\$jagen_dir/bin"
EOF
}

write_config() {
    cat >"$config_file" <<EOF
# Current build root configuration type.
pkg_sdk="$sdk"

# Toplevel working directory (for convenience)
base_dir=\$(real_path "\$jagen_root/..")

# A directory containing software distributions and patches.
jagen_dist_dir="\$base_dir/dist"

# A directory where source packages will be checked out.
jagen_src_dir="\$base_dir/src"

# A directory where build products will be stored.
jagen_build_dir="\$jagen_root/build"

# A directory containing SDK (optional).
jagen_sdk_dir="$sdk_dir"

# A directory containing target toolchain.
jagen_toolchain_dir="$toolchain_dir"

# Space separated list of optional features.
#   debug  - build debugging tools
#   ccache - wrap compilation commands with ccache
pkg_flags=""

# Package names excluded from clear and update during rebuilds.
# Example: pkg_source_exclude='chicken karaoke-player'
pkg_source_exclude=""

# Global build type.
# Available values: Release|RelWithDebInfo|Debug
pkg_build_type="Release"
EOF
}

die() { [ $# = 0 ] || echo "Error: $@"; exit 1; }

curr_root=$(dirname $0)
real_root=$(cd "$curr_root"; pwd -P)

sdk=''
use_force=''

while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -f|--force)
            use_force=1
            ;;
        *)
            sdk="$1"
            ;;
    esac
    shift
done

case $sdk in
    sigma)
        sdk_dir='$jagen_src_dir/sigma-mrua'
        toolchain_dir='$base_dir/toolchain/mips-2012.03'
        ;;
    hisilicon)
        sdk_dir='$jagen_src_dir/hisilicon'
        toolchain_dir='$base_dir/toolchain/arm-hisiv200-linux'
        ;;
    android)
        sdk_dir='$jagen_src_dir/hisilicon'
        toolchain_dir='$base_dir/toolchain/android-ndk-r10d'
        ;;
esac

write_env || die

if [ -f "$config_file" -a ! "$use_force" ]; then
    echo "Not overwriting '$config_file'"
else
    write_config "$config_file" || die
fi
