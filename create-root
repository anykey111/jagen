#!/bin/sh

print_help() {
    cat <<EOF
Usage: create-root [-f] <ROOT> [SDK]

  Creates new jagen build root in the specified <ROOT> directory.

SYNOPSIS:

  The script should be executed in the jagen project directory. It will
  generate new build root environment. If SDK is specified the template
  configuration file will be added to the generated build root. The existing
  file will not be overwritten unless the '-f' flag is given.

  Currently supported SDK types are: 'sigma', 'hisilicon'.

  In the new build root the 'env.sh' will be created. It should be sourced in
  the current shell to activate the environment. Example:

    cd <ROOT>
    . ./env.sh

  After this other jagen commands will use the sourced environment.

EOF
}

write_env() {
    local filename="$1"
    cat >"$filename" <<EOF || die
export jagen_root="$PWD"
export jagen_build_root="\$PWD"

. "\$jagen_root/lib/env.sh" ||
    { echo "Failed to load environment"; return 1; }

add_PATH "\$target_bin_dir"
add_PATH "\$pkg_private_dir/bin"
add_PATH "\$jagen_root/bin"
EOF
}

write_config() {
    local filename="$1"
    cat >"$filename" <<EOF || die
pkg_dist_dir=''
pkg_sdk='$sdk'
pkg_flags=''
pkg_source_exclude=''
pkg_build_type='Release'
EOF
}

die() { [ $# = 0 ] || echo "Error: $@"; exit 1; }

if [ $# = 0 ]; then
    print_help
    exit 0
fi

root=''
sdk=''
force=''

for arg; do
    [ "$arg" = '-f' ] && { force=1; continue; }
    [ "$root" ] || { root="$arg"; continue; }
    [ "$sdk"  ] || { sdk="$arg";  continue; }
done

root="${root:-$PWD}"

env_file="$root/env.sh"
config_file="$root/local.sh"

mkdir -p "$root" || die
write_env "$env_file" || die

if [ "$sdk" ]; then
    if [ -f "$config_file" ]; then
        if [ "$force" ]; then
            echo "Overwriting configuration file '$config_file'"
            write_config "$config_file"
        else
            echo "The configuration file '$config_file' is already exists, not overwriting"
        fi
    else
        write_config "$config_file"
    fi
fi
