#!/bin/sh

. "$jagen_dir/lib/pkg.sh" || die "Failed to load pkg env"

p_build_root="$jagen_build_dir/pkg"

p_name="$1"
p_stage="$2"
p_config="$3"

p_log="${jagen_build_dir}/${p_name}-${p_stage}${p_config:+-${p_config}}.log"
p_work_dir="$p_build_root/$p_name"

rm -f "$p_log" || die "Failed to rm $p_log"
mkdir -p "$p_work_dir" || die "Failed to mkdir $p_work_dir"
cd "$p_work_dir" || die "Failed to cd to $p_work_dir"

include "$jagen_build_include_dir/$p_name" "$p_config"
include "$jagen_lib_dir/pkg/$p_name" 

p_source_name="$(_jagen src name "$p_source")"
p_source_dir="${p_source_dir:-$p_work_dir/$p_source_name}"
p_build_dir="${p_build_dir:-$p_source_dir}"

run_stage() {
    local name="$1"
    local pkg="$p_name${p_config:+ ($p_config)}"

    if is_function "$name"; then
        debug "$pkg: $name"
        eval "$name" >"$p_log" 2>&1 || die "Failed to run '$name' stage of package $pkg"
    fi
}

if [ "$p_config" ]; then
    use_toolchain "$p_config"
fi

if [ "$p_config" = 'host' ]; then
    p_system="$host_system"
    p_prefix="$host_prefix"
    p_dest_dir="$host_dir"
elif [ "$p_config" = 'target' ]; then
    p_system="$target_system"
    p_prefix="$target_prefix"
    p_dest_dir="$target_dir"
elif [ "$p_config" = 'tools' ]; then
    p_system="$host_system"
    p_prefix=""
    p_dest_dir="$tools_dir"
elif [ "$p_config" = 'rootfs' ]; then
    use_toolchain target
    p_system="$target_system"
    p_prefix=""
    p_dest_dir="$sdk_rootfs_prefix"
fi

[ -d "$p_build_dir" ] && cd "$p_build_dir"

run_stage "pkg_${p_stage}_pre"

if is_function "pkg_${p_stage}_${p_config}"; then
    run_stage "pkg_${p_stage}_${p_config}"
else
    run_stage "pkg_${p_stage}"
fi

run_stage "pkg_${p_stage}_post"
