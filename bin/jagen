#!/bin/sh

[ "$pkg_root" ] ||
    { echo "pkg_root is not set, please source env.sh in the project root.";
      exit 1; }

. "$pkg_root/lib/pkg.sh" ||
    { echo "Failed to load pkg environment"; exit 1; }
. "$pkg_root/lib/help.sh" ||
    { echo "Failed to load help"; exit 1; }

if [ $# = 0 ]; then
    print_help
    exit
fi

build_file="$pkg_build_dir/build.ninja"

rebuild_chibi() {
    local name="chibi-scheme-0.7"
    local source="$pkg_dist_dir/${name}.tgz"
    local build_dir="$chibi_dir/build"
    local log="$build_dir/build.log"

    rm -rf "$build_dir" || die
    mkdir -p "$build_dir" || die
    tar -C "$build_dir" -xpf "$source" || die
    cd "$build_dir/$name" || die
    make PREFIX="$chibi_dir" >"$log" 2>&1 || die
    make PREFIX="$chibi_dir" install >>"$log" 2>&1 || die
}

in_path chibi-scheme || rebuild_chibi

case $1 in
    help)
        print_help
        ;;
    clean)
        p_clean_dir "$pkg_build_dir"
        exec jagen refresh
        ;;
    update)
        if p_src_is_dirty "$pkg_root"; then
            warning "$pkg_root is dirty, not updating"
        else
            p_src_pull "$pkg_root"
        fi
        exec jagen refresh
        ;;
    refresh)
        message "Refreshing build rules"
        $pkg_bin generate "$build_file" "$pkg_lib_dir/rules.${pkg_sdk}.scm" ||
            die "Failed to generate build rules"
        include "$pkg_root/lib/toolchain"
        generate_toolchain_wrappers
        ;;
    build)
        shift
        $pkg_bin build "$build_file" "$@" || die "Build failed"
        ;;
    rebuild)
        shift
        $pkg_bin rebuild "$build_file" "$@" || die "Rebuild failed"
        ;;
    each)
        shift
        $pkg_bin each "$build_file" "$pkg_lib_dir/rules.${pkg_sdk}.scm" "$@" ||
            die "Failed to run command"
        ;;
    *)
        _jagen "$@"
        ;;
esac
