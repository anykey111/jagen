#!/bin/sh

print_help() {
    echo "Usage: $0 <COMMAND> <OPTIONS>...
Generates a build system.

Commands:
  help		print this help message
  refresh	regenerate build system"
}

[ "$ja_root" ] || { echo "ja_root is not set"; exit 1; }

. "$ja_root/lib/pkg.sh" ||
    { echo "Failed to load pkg environment"; exit 1; }

build_file="$pkg_build_dir/build.ninja"

if [ $# = 0 ]; then
    print_help
    exit
fi

rebuild() {
    local IFS tab targets_only targets logs tp lp status
    IFS="$(printf '\n\t')"; tab="$(printf '\t')"
    [ $1 = only ] && { shift; targets_only=1; }

    for target in "$@"; do
        tp="$pkg_build_dir/$target"; lp="${tp}.log"
        targets="${targets}${tab}${tp}"
        logs="${logs}${tab}${lp}"
    done

    rm -f $targets
    tail --quiet --lines=0 --follow=name --retry \
        "$pkg_build_dir"/*.log 2>/dev/null &

    if [ "$targets_only" ]; then
        ninja -f "$build_file" $targets >/dev/null; status=$?
    else
        ninja -f "$build_file" >/dev/null; status=$?
    fi

    kill $!
    return $status
}

rebuild_chibi() {
    for s in clean unpack build install; do
        "$ja_bin_dir/jagen-pkg" chibi-scheme $s tools \
            || die "Failed to $s chibi-scheme"
    done
}

case $1 in
    help)
        print_help
        ;;
    clean)
        p_clean_dir "$pkg_build_dir"
        ;;
    update)
        p_src_pull .
        exec jagen refresh
        ;;
    refresh)
        use_env tools
        p_in_path chibi-scheme || rebuild_chibi
        $ja_bin generate "$build_file" "$ja_lib_dir/rules.scm" ||
            die "Failed to generate build rules"
        ;;
    build)
        shift
        ninja -f "$build_file" "$@" || die "Build failed"
        ;;
    rebuild)
        shift
        rebuild "$@"
        ;;
    *)
        die "Unknown command: $1"
        ;;
esac
